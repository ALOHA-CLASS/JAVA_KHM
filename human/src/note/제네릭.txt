▶제네릭
: 모든 클래스타입을 다룰 수 있도록
  타입매개변수로 클래스/메소드를 정의하는 기법

 "클래스를 정의할 때, 타입을 확정짓지 않고
   객체 생성할 때, 타입을 특정하는 기법"


-타입매개변수 관례적 표기
  T	타입(Type)
  K	키(Key)
  V	값(Value)
  N	숫자(Number)
  E	원소(Element)

- 제네릭 클래스
- 클래스를 정의할 때, 제네릭 기법 사용
class 클래스명 <타입매개변수1, 타입매개변수2> {

}


- 제네릭 메소드
- 메소드를 정의할 때, 제네릭 기법 사용
: 메소드를 정의하는 시점에 타입이 특정되지 않고,
  메소드를 호출하느 시점에 타입을 특정한다.

- 형태
접근 지정자 <T> 반환타입 메소드명(매개변수) {   }

1. 접근지정자 <T> T 메소드명 (T t) {  }
2. 접근지정자 <T, V> T 메소드명 (T t, V v) {  }
3. 접근지정자 <T> void 메소드명 (T t) {  }
4. 접근지정자 <T> T 메소드명 ( ) {  }



▶제네릭 타입 범위 제한
   -제한된 타입 파라미터
  :   <T extends 상위타입>

  -제네릭 클래스의 타입 제한
  접근지정자  class 클래스명 <T extends 상위클래스> {  }


  -제네릭 메소드의 타입 제한
  접근지정자 <T extends 상위클래스> T 메소드명(T t) {  }


▶제네릭 클래스 상속

 부모 클래스(제네릭) -> 자식 클래스(제네릭)
 : 상속받은 자식클래스 또한 제네릭 클래스가 된다.
   부모의 제네릭 타입매개 변수를 그대로 물려받기 때문



▶ 와일드카드 타입
  - ? : 와일드카드(wildcard)
  -  제네릭타입<?>  			: 제한없는 와일드카드
  -  제네릭타입<? extends 상위타입> 	 : 상위 클래스 제한
			              상위타입 포함 자식타입 지정가능

  -  제네릭타입<? super 하위타입>	: 하위 클래스 제한
				  하위타입 포함 부모타입 지정가능


  -  ?  :  임의의 어떤 것
     <? extends Person>	:    Person 및 Person 자식클래스들 중 어떤 것

  - 제네릭 타입을 매개변수나 리턴타입으로 사용할 때, 구체적인 타입 대신 사용가능































































