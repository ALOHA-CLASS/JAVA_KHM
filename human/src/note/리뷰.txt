1. 자바 시작하기
  - 프로그래밍언어?
  - JDK, 이클립스 설치

2. 변수와 타입
   - 기본 타입 (8)
      : char byte short int long float double boolean
3. 연산자
    - 분류 : 단항/이항/삼항
    - 산술 연산자
    - 증감 연산자
    - 비교 연산자
    - 논리 연산자
    - ...

4. 제어문
   - 조건문  : if, switch
   - 반복문  : for, foreach, while, do~while

5. 참조 타입
    - 배열
    - 열거체 (enum)
    - 클래스
    - 인터페이스

6. 클래스
   : 객체를 정의하는 설계도
    - 멤버 : 변수, 메소드
    - 생성자  :  객체가 생성될 때, 실행된 메소드
                    객체의 멤버를 초기화는 역할
    -  다형성
        * 메소드 오버로딩 (over-load)
	: 메소드 중복 정의  
	 - 같은 클래스 내에서 매개변수의 타입/개수/순서를 다르게 하여
  	    메소드를 중복 정의하는 것

        * 메소드 오버라이딩 (over-ride)
	:  메소드 재정의
  	  - 부모 클래스에 정의된 메소드를 자식 클래스에서 다시 정의하는 것
	     자식 객체로 생성 시, 동적할당으로 인해 부모 메소드를 무시하고
   	     자식 메소드를 우선하여 실행한다.

    - this 		:   객체 자기 자신을 가리키는 레퍼런스
    - this( ) 	:   생성자 내에서 다른 생성자를 호출하는 메소드

    - super    	:   부모 개체를 가리키는 레퍼런스
    - super( )	:   자식 생성자에서 부모 생성자를 호출하는 메소드

    - 접근 지정자	
	* 외부에서 해당 클래스/메소드/변수 에 접근할 수 있는 허용 범위를 지정하는 키워드 
	* 종류 : public, default, protected, private
    			
    
    - static 멤버  vs  인스턴스 멤버
    - static ?
        :  "고정된" 이라는 뜻을 가지며,
           변수/메소드를 클래스가 로딩될 때, 제일 먼저 메모리 공간에 고정하는 키워드
            - 객체를 생성하지 않고도 사용할 수 있다.
            - 프로그램 시작 시 할당되고, 프로그램 종류 시에 메모리에서 해제된다.
            - 모든 객체가 static 멤버를 공유할 수 있다.
   
    - final  ?
       : "마지막"
           	* final 클래스 	: 마지막 클래스, 상속하지 못하도록 막는 것
  	* final 메소드	: 마지막 메소드, 오버라이딩을 못하도록 막는 것
	* final 변수	: 마지막 변수, 상수; 선언 시 값을 초기화하고 값 변경 불가


    -  getter(  )		:  변수의 값을 가져오는 메소드
	ex. getName()
    -  setter(  )		:  변수의 값을 지정하는 메소드	
	ex. setName("이름")


    - toString(  )		: Object 클래스에 정의되어 있는 메소드로,
			  오버라이딩하여 문자열 템플릿을 리턴하면
 			  객체를 출력할  때, 원하는 문자열 형식으로 출력하게 해주는 메소드


** 단축키

	-  파일 저장	: ctrl + S
	-  프로그램 실행	: ctrl + F11
	-  폰트 확대/축소	: ctrl +  (+/-)
	-  한 줄 삭제	: ctrl + D
	-  한 줄 복사	: ctrl + alt + (↑/↓)
		(cf. 디스플레이 설정 단축키와 충돌 되는 경우가 있음, 디스플레이 단축키 비활성화)
		 - 바탕화면 우클릭 > 그래픽 속성  > 옵션 및 지원 > 바로가기키 관리 (사용안함) 클릭
	-  스크롤 이동	: ctrl + (↑/↓)
	-  코드 이동	: alt + (↑/↓)	
	-  현재 탭 종료	: ctrl + W
	-  전체 탭 종료	: ctrl + shift + W
	-  찾기 바꾸기	: ctrl + F
	-  파일 찾기	: ctrl + shift + R
	-  코드 찾기	: ctrl + H
	-  뒤로가기	: ctrl + Z
	-  앞으로가기	: ctrl + Y
	-  잘라내기	: ctrl + X
	-  모두 선택	: ctrl + A
	-  코드 정리	: ctrl + shift + F
	-  들여쓰기	: tab
	-  내어쓰기	: shift + tab
	-  한 줄 주석	: ctrl + /  	 	또는   ctrl + shift + C
	-  여러 줄 주석	: ctrl + shift + /
	-  여러 줄 주석해제	: ctrl + shift + \
	-  새 파일 만들기	: ctrl + N
	-  이름 바꾸기	: F2
	-  전체화면	: ctrl + M
	-  단어 찾기	: ctrl + K
	-  라인 찾기	: ctrl + L
	-  한 번에 import	: ctrl + shift + O
	*  자동 완성	: ctrl + space
			 (맥북OS :  CMD + ctrl + space)
	    * 생성자 자동완성
	      - 변수로 생성자 자동완성 : alt + shift + S : O
	      - 부모로 생성자 자동완성 : alt + shift + S : C

	    * 오버라이딩 	:  alt + shift + S : V
	    * getter/setter 	:  alt + shift + S : R
	    * toString()	:  alt + shift + S : S

	     

7. 상속
    	상속 ?
	: "자식이 부모로부터 무언가를 물려받는 것"
	
	상속 
	: 부모 클래스의 변수, 메소드를 자식 클래스에서 재사용하는 것
	키워드 	: extends
	관계	:   부모클래스 (Super Class)    :   자식클래스 (Sub Class)
	
	
	- 클래스 타입 변환
		* 업캐스팅 (자동 타입 변환)
	   	부모 클래스  = 자식 클래스

		*  다운캐스팅 (강제 타입 변환)
		자식 클래스  = (자식 타입) 부모 클래스
		- 전제조건 : 업캐스팅

	* 추상 클래스
	  - 추상 ? 
	   : 여러 대상으로부터 공통된 특성을 추출하는 것
	
   	- 추상 클래스
	: 클래스들의 공통된 특성을 추출하여 선언한 클래스
	  키워드 : abstract
	  * 구현 클래스에서 사용할 변수/메소드 이름을 통일
	  * 구현 클래스를 작성할 시간을 절약
	  * 설계자와 코더가 각각의 업무인 설계와 코드 작업을 분업화

	  ex) (추상클래스)도형  --  (구현클래스)삼각형, 사각형, 원형


8. 인터페이스
	- 인터페이스 ?
	: 서로 다른 대상을 연결시켜주는 매개체
	
	* 인터페이스
	:  상수와 추상메소드를 정의한 클래스
	   객체의 사용방법을 요약적으로 정의한 타입
	   개발 코드와 객체가 서로 통하는 접점
	- 키워드	: 정의 interface
		  구현 implements
	- 구성요소 : 상수, 추상 메소드, 디폴트 메소드, static 메소드

	- 인터페이스 다중 구현이 가능하다.
	- 인터페이스 끼리 상속이 가능하다.











	


































	


	      











	













	






























    

















   








    





















  











     








    
