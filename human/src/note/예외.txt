
에러  (Compile Error)
- 컴파일 과정에서 문법상에 비문,
  사용할 수 없는 키워드 등을 작성하여
  컴파일에 실패하는 것
  (프로그램 실행 불가)


예외 (Exception, Runtime Error )
- 정상적으로 컴파일되어서
   코드에 문법상에 문제가 없지만
   프로그램 실행 후, 예상치 못한 상황이
   발생하여 프로그램이 중단 되는 것


▶ 자동 리소스 닫기 (Auto Close)

try-with-resources

예외 발생 여부와 관련없이
일반적으로,
finally { } 블록에 "객체.close(  )" 와 같은 메소드로
자원을 해제하는데, 매번 명시적으로 자원을 해제하지 않고
자동으로 해제시켜주는 예외처리문
* try 문에 (  ) 안에서 자동으로 자원해제시킬 객체를 생성한다.

try( 클래스 객체명 = new 클래스( ) ) {

} catch( 예외클래스 객체명 ) {

}

▶ 예외 던지기 (예외 떠넘기기)
 키워드 : thorows

 
  특정 메소드 내에서 발생한 예외에 대한 책임을
  해당 메소드를 호출한 곳으로 넘기는 것

  - 문법구조
  접근지정자 반환타입 메소드명 (매개변수 ... ) throws Exception {
	
  }



▶ 예외 강제 발생
throw new 예외클래스( );


▶사용자 정의 예외 클래스 선언
public class ???Exception extends [Exception or RunException] {

     public ???Exception () {  }
     public ???Exception (String message) { super(message); }

}
- 예외가 되는 조건에 따라서 예외를 강제 발생시켜 처리해준다.


▶예외 정보
 Excetion e 
  e.getMessage()	: 예외 메시지와 예외가 발생한 이유가 출력된다
  e.printStackTrace()	: 예외 발생 코드를 추적하여 원인을 단계별로 출력한다






















































 
















     